---
// COMPONENTS //
import TicketPopup from "../../components/TicketPopup.astro";
import type { SuccessRegistrationResponseData } from "../../types/form";

interface Props {
  registrationSuccessDetails: SuccessRegistrationResponseData;
}

const { registrationSuccessDetails } = Astro.props as Props;

// Map month names to numbers
const monthMap: Record<string, number> = {
  Jan: 0,
  Feb: 1,
  Mar: 2,
  Apr: 3,
  May: 4,
  Jun: 5,
  Jul: 6,
  Aug: 7,
  Sep: 8,
  Sept: 8,
  October: 9,
  Oct: 9,
  Nov: 10,
  Dec: 11,
};

// Extract "18 Sept" â†’ [day, month]
const [dayStr, monthStr] = registrationSuccessDetails.appointment_time
  .split(",")[0]
  .trim()
  .split(" "); // ["18", "Sept"]

const day = parseInt(dayStr, 10);
const month = monthMap[monthStr]; // 8 for Sept
const year = new Date().getFullYear(); // 2025

function parseTime(timeStr: string) {
  // "05:30 PM"
  const [time, modifier] = timeStr.split(" ");
  let [hours, minutes] = time.split(":").map(Number);

  if (modifier === "PM" && hours < 12) hours += 12;
  if (modifier === "AM" && hours === 12) hours = 0;

  return { hours, minutes };
}

const { hours: startH, minutes: startM } = parseTime(
  registrationSuccessDetails.start_time
);
const { hours: endH, minutes: endM } = parseTime(
  registrationSuccessDetails.end_time
);

function formatLocalDateString(
  year: number,
  month: number,
  day: number,
  hours: number,
  minutes: number
) {
  const pad = (n: number) => String(n).padStart(2, "0");
  return (
    year + pad(month + 1) + pad(day) + "T" + pad(hours) + pad(minutes) + "00"
  );
}

const startLocal = formatLocalDateString(year, month, day, startH, startM);
const endLocal = formatLocalDateString(year, month, day, endH, endM);

const params = new URLSearchParams({
  action: "TEMPLATE",
  text: "PlAiground Masterclass by Microsoft and Reliance",
  dates: `${startLocal}/${endLocal}`,
  details:
    "Registration Number: " + registrationSuccessDetails.confirmation_number,
  location: `${registrationSuccessDetails.location}, ${registrationSuccessDetails.city}`,
  ctz: "Asia/Kolkata",
});

const gcalLink = `https://calendar.google.com/calendar/render?${params.toString()}`;
---

<section
  class="bg-[url('/images/form-bg.png')] bg-center flex flex-col gap-10 md: py-10"
  data-sal="slide-up"
  data-sal-delay="400"
  data-sal-duration="400"
>
  <div class="container mx-auto flex flex-col items-center">
    <!-- Booking Details Card -->
    <div class="flex flex-col w-[94%] md:mb-4 lg:mb-12 lg:flex-row">
      <!-- Left side - Model Image section -->
      <div
        class="relative bg-n-50 flex justify-center items-end pt-8 z-10 rounded-tl-2xl rounded-tr-2xl lg:rounded-bl-2xl lg:rounded-tr-[0px] lg:w-1/2"
      >
        <img
          src="/images/success-page-image.png"
          alt="model-img"
          class="w-[90%] max-h-[600px] object-contain -mb-8"
        />
      </div>

      <!-- Right side - Details section -->
      <div
        class="relative bg-red-500 flex flex-col gap-10 py-4 rounded-br-2xl rounded-bl-2xl lg:rounded-bl-[0px] lg:rounded-tr-2xl lg:w-1/2 lg:justify-between"
      >
        <div
          class="flex flex-col w-full gap-6 mb-2 md:mb-0 px-8 md:gap-4 xl:gap-6 md:px-12"
        >
          <!-- Title -->
          <p
            class="sub-title text-n-50 text-center md:text-left md:pb-5 pt-10 md:text-3xl xl:text-4xl"
          >
            Your booking details:
          </p>

          <!-- Booking Values -->
          <div
            class="flex flex-col gap-4 text-2xl text-n-50 font-semibold lg:gap-8"
          >
            <!-- Name -->
            <div class="flex md:text-2xl">
              <div class="min-w-[30%] flex justify-between">
                <p>Name</p>
                <span>:</span>
              </div>
              <p class="font-medium pl-2 lg:pl-4">
                {registrationSuccessDetails.full_name}
              </p>
            </div>

            <!-- Session -->
            <div class="flex text-2xl text-n-50 font-semibold md:text-2xl">
              <div class="min-w-[30%] flex justify-between">
                <p>Session</p>
                <span>:</span>
              </div>
              <p class="font-medium pl-2 lg:pl-4">
                {registrationSuccessDetails.appointment_time}
              </p>
            </div>

            <!-- Center -->
            <div class="flex text-2xl text-n-50 font-semibold md:text-2xl">
              <div class="min-w-[30%] flex justify-between">
                <p>Center</p>
                <span>:</span>
              </div>
              <p class="font-medium pl-2 lg:pl-4 md:leading-normal">
                {registrationSuccessDetails.location}
              </p>
            </div>
          </div>
        </div>

        <!-- Confirmation block -->
        <div
          class="bg-red-700 text-n-50 px-5 py-5 w-[90%] self-start rounded-tr-2xl rounded-br-2xl"
        >
          <p class="para-text text-n-50 text-left">
            Masterclass Registration Number
          </p>
          <p class="text-3xl md:text-4xl font-semibold tracking-wider">
            {registrationSuccessDetails.confirmation_number}
          </p>
        </div>
      </div>
    </div>

    <!-- Buttons at the bottom -->
    <div
      class="flex flex-col items-center gap-5 w-full py-6 pt-12 lg:flex-row lg:p-8 lg:w-[70%]"
      data-sal="slide-up"
      data-sal-duration="200"
      data-sal-delay="200"
      data-sal-easing="ease-out-back"
    >
      <!-- View My Ticket Button -->
      <button id="viewTicket" type="submit" class="btn-cta w-[70%] lg:w-[50%]">
        View My Ticket
      </button>
      <!-- Download Ticket -->
       <!-- View My Ticket Button -->
      <button id="downloadTicket" type="submit" class="btn-cta w-[70%] lg:w-[50%]">
        Download Ticket
      </button>
      <!-- Add to Calendar Button -->
      <a
        id="gcalBtn"
        target="_blank"
        rel="noopener"
        class="btn-cta w-[70%] lg:w-[50%] text-center"
        data-appointment={registrationSuccessDetails.appointment_time}
        data-location={registrationSuccessDetails.location}
        data-city={registrationSuccessDetails.city}
        data-confirm={registrationSuccessDetails.confirmation_number}
        href={gcalLink}
      >
        Add to Calendar
      </a>
    </div>

    <!-- Ticket Popup -->
    <div id="ticketPopup" class="hidden">
      <TicketPopup registrationSuccessDetails={registrationSuccessDetails} />
    </div>

    <!-- html2canvas -->
    <script
      src="https://cdn.jsdelivr.net/npm/html2canvas@1.4.1/dist/html2canvas.min.js"
      defer></script>

    <script is:inline>
      // Auto-download on page load
      window.addEventListener("load", async () => {

        
        
      });

      // Show popup on button click
      document.addEventListener("DOMContentLoaded", () => {


        // Select the DOM Elements
        const downloadBtn = document.getElementById("downloadTicketPng");
        const popup = document.getElementById("ticketPopup");
        const ticketCard = document.getElementById("ticketCard");

        const openBtn = document.getElementById("viewTicket");
        const downloadTicketBtn = document.getElementById("downloadTicket");

        // If no Popup Found - stop here
        if (!popup || !ticketCard) return;

        let showTicket = function(){
          // Show off-screen
          popup.classList.remove("hidden");
          popup.classList.add(
            "block",
            "fixed",
            "z-[-999999]",
            "left-[-1000000px]",
            "top-0",
            "opacity-0",
            "pointer-events-none"
          );
        };

        let hideTicket = function(){
          // Show off-screen
          downloadBtn.style.display = "block";
          popup.classList.add("hidden");
          popup.classList.remove(
            "block",
            "fixed",
            "z-[-999999]",
            "left-[-1000000px]",
            "top-0",
            "opacity-0",
            "pointer-events-none"
          );
        };

        /** Download the Ticket using HTML 2 Canvas */
        let downloadTitcket = async function(){
          // hide button before capture
          downloadBtn.style.display = "none";
          try {
            // Capture ticket as canvas
            const canvas = await window.html2canvas(ticketCard, {
              useCORS: true,
              scale: 2,
              backgroundColor: null,
            });

            // Reg No. for filename
            const regNo =
              document
                .getElementById("downloadTicketPng")
                ?.getAttribute("data-registration-number") || "ticket";

            // Trigger download
            const link = document.createElement("a");
            link.download = `Masterclass-Ticket-${regNo}.png`;
            link.href = canvas.toDataURL("image/png");
            link.click();
          } finally {
            // hide again after download
            popup.className = "hidden";
          }
        };

        // SHOW - DOWNLOAD - HIDE
        showTicket();
        downloadTitcket();
        setTimeout(function(){
          hideTicket();
        }, 1000);

        // Select the Elements
        

        // If no element found - then stop here
        if (!openBtn || !popup) return;

        // On click of the "View Ticket" button
        openBtn.addEventListener("click", (e) => {
          e.preventDefault();
          popup.classList.remove("hidden");
          popup.classList.add("block");
          document.documentElement.classList.add("overflow-y-hidden");
        });

        // On click of the "View Ticket" button
        downloadTicketBtn.addEventListener("click", (e) => {
          e.preventDefault();
          // SHOW - DOWNLOAD -HIDE
          showTicket();
          downloadTitcket();
          setTimeout(function(){
            hideTicket();
          }, 1000);
        });

      });
    </script>
  </div>
</section>

---
// API SERVICES //
import { getAllCitiesRequest } from "../services/api/dropdowns.api.service.ts";
import { getAllLocationsRequest } from "../services/api/dropdowns.api.service";

// Call API (server-side)

// const res = await fetch("http://3.7.74.98:3000/cities/");
// const loc = await fetch(
//   "http://3.7.74.98:3000/locations?city_id=1"
// );
// console.log(loc);

const res = await getAllCitiesRequest();
const data = res.items;
---

<!-- Main/Form Section -->
<section
  class="min-h-full py-16 bg-muted flex flex-col gap-12 justify-center items-center bg-n-100"
>
  <h1 class="text-4xl font-bold">Form</h1>
  <!-- Form Wrapper -->
  <div class="w-1/3 mx-auto bg-n-50 p-8 rounded-lg shadow">
    <!-- Form -->
    <form id="registerForm" class="space-y-4 w-full">
      <!-- Full Name -->
      <div>
        <label for="fullName" class="block text-sm font-medium text-n-700">
          Full Name
        </label>
        <input
          id="fullName"
          type="text"
          placeholder="Enter your full name"
          class="w-full border p-3 rounded"
        />
      </div>

      <!-- Date of Birth -->
      <div>
        <label for="dob" class="block text-sm font-medium text-n-700">
          Date of Birth
        </label>
        <input
          id="dob"
          type="date"
          placeholder="YYYY-MM-DD"
          class="w-full border p-3 rounded"
        />
      </div>

      <!-- Mobile Number -->
      <div>
        <label for="phone" class="block text-sm font-medium text-n-700">
          Mobile Number
        </label>
        <input
          id="phone"
          type="tel"
          placeholder="Enter your mobile number"
          class="w-full border p-3 rounded"
        />
      </div>

      <!-- Email -->
      <div>
        <label for="email" class="block text-sm font-medium text-n-700">
          Email
        </label>
        <input
          id="email"
          type="email"
          placeholder="Enter your email"
          class="w-full border p-3 rounded"
        />
      </div>

      <!-- Institution -->
      <div>
        <label for="institution" class="block text-sm font-medium text-n-700">
          Institution
        </label>
        <input
          id="institution"
          type="text"
          placeholder="Enter your institution"
          class="w-full border p-3 rounded"
        />
      </div>

      <!-- City -->
      <div>
        <label for="city" class="block text-sm font-medium text-n-700"
          >City</label
        >
        <select id="city" class="w-full border p-3 rounded">
          <option value="">Select City</option>
          {data.map((city) => <option value={city.id}>{city.name}</option>)}
        </select>
      </div>

      <!-- Location -->
      <div>
        <label for="location" class="block text-sm font-medium text-n-700"
          >Location/Center</label
        >
        <select id="location" class="w-full border p-3 rounded">
          <option value="">Select Location</option>
        </select>
      </div>

      <!-- Slot Date -->
      <div>
        <label for="slotDate" class="block text-sm font-medium text-n-700"
          >Slot Date</label
        >
        <select id="slotDate" class="w-full border p-3 rounded">
          <option value="">Select Date</option>
        </select>
      </div>

      <!-- Slot Time -->
      <div>
        <label for="slotTime" class="block text-sm font-medium text-n-700"
          >Slot Time</label
        >
        <select id="slotTime" class="w-full border p-3 rounded">
          <option value="">Select Date</option>
        </select>
      </div>

      <!-- Submit -->
      <button type="submit" class="bg-n-800 text-n-50 px-6 py-3 rounded w-full">
        Submit
      </button>
    </form>
  </div>
</section>
<script>
  // Imports (client-side, ESM)

  import {
    getAllLocationsRequest,
    getAllSlotDateRequest,
    getAllSlotTimeRequest,
  } from "../services/api/dropdowns.api.service";
  import { registerRequest } from "../services/api/register.api.service";

  // Grab DOM elements (narrow with proper types)
  const citySelect = document.getElementById(
    "city"
  ) as HTMLSelectElement | null;
  const locationSelect = document.getElementById(
    "location"
  ) as HTMLSelectElement | null;
  const slotDateSelect = document.getElementById(
    "slotDate"
  ) as HTMLSelectElement | null;
  const slotTimeSelect = document.getElementById(
    "slotTime"
  ) as HTMLSelectElement | null;
  const form = document.getElementById(
    "registerForm"
  ) as HTMLFormElement | null;

  /** Replace options of a select element */
  function setOptions(
    select: HTMLSelectElement,
    options: Array<{ id: string | number; name: string }>,
    placeholder = "Select Location"
  ): void {
    // Reset with placeholder
    select.innerHTML = `<option value="">${placeholder}</option>`;
    // Append rows
    for (const option of options) {
      const opt = document.createElement("option");
      opt.value = String(option.id);
      opt.textContent = option.name;
      select.appendChild(opt);
    }
  }

  // Guard: required elements must exist
  if (
    !citySelect ||
    !locationSelect ||
    !slotDateSelect ||
    !slotTimeSelect ||
    !form
  ) {
    // Log error
    console.error("[form] Required elements not found in the DOM.");
  } else {
    // Disable location until a city is chosen
    locationSelect.disabled = true;
    slotDateSelect.disabled = true;
    slotTimeSelect.disabled = true;

    // Helper: clear dependent selects whenever something upstream changes
    const resetAfterCity = () => {
      setOptions(locationSelect, [], "Select Location/Center");
      locationSelect.disabled = true;

      setOptions(slotDateSelect, [], "Select Slot Date");
      slotDateSelect.disabled = true;

      setOptions(slotTimeSelect, [], "Select Slot Time");
      slotTimeSelect.disabled = true;
    };

    const resetAfterLocation = () => {
      setOptions(slotDateSelect, [], "Select Slot Date");
      slotDateSelect.disabled = true;

      setOptions(slotTimeSelect, [], "Select Slot Time");
      slotTimeSelect.disabled = true;
    };

    const resetAfterDate = () => {
      setOptions(slotTimeSelect, [], "Select Slot Time");
      slotTimeSelect.disabled = true;
    };

    // CITY change → fetch LOCATIONS
    citySelect.addEventListener("change", async (e: Event) => {
      const cityId = (e.currentTarget as HTMLSelectElement).value;

      // reset downstream selects
      resetAfterCity();

      if (!cityId) return;

      // show loading in location
      setOptions(locationSelect, [], "Loading locations...");
      try {
        const res = await getAllLocationsRequest(cityId);
        setOptions(locationSelect, res.items, "Select Location/Center");
      } catch (err) {
        console.error("[locations] fetch failed:", err);
        setOptions(locationSelect, [], "Failed to load locations");
      } finally {
        locationSelect.disabled = false;
      }
    });

    // LOCATION change → fetch SLOT DATES
    locationSelect.addEventListener("change", async () => {
      const cityId = citySelect.value;
      const locationId = locationSelect.value;

      // reset downstream
      resetAfterLocation();

      if (!cityId || !locationId) return;

      function formatIsoToDDMMYYYY(iso: string): string {
        const d = new Date(iso);
        const dd = String(d.getDate()).padStart(2, "0");
        const mm = String(d.getMonth() + 1).padStart(2, "0");
        const yyyy = d.getFullYear();
        return `${dd}-${mm}-${yyyy}`;
      }

      // show loading in dates
      setOptions(slotDateSelect, [], "Loading slot dates...");
      try {
        // NOTE: your service signature is (cityId, locationId)
        const res = await getAllSlotDateRequest(cityId, locationId);
        console.log(res.items);


        // Expecting each item: { id, name } e.g. id="2025-08-22", name="22 Aug 2025"
        setOptions(slotDateSelect, res.items, "Select Slot Date");
      } catch (err) {
        console.error("[slot-dates] fetch failed:", err);
        setOptions(slotDateSelect, [], "Failed to load slot dates");
      } finally {
        slotDateSelect.disabled = false;
      }
    });

    // SLOT DATE change → fetch SLOT TIMES
    slotDateSelect.addEventListener("change", async () => {
      const cityId = citySelect.value;
      const locationId = locationSelect.value;
      const selectedDate = slotDateSelect.value; // expect ISO or API-expected format

      // reset times
      resetAfterDate();

      if (!cityId || !locationId || !selectedDate) return;

      // show loading in times
      setOptions(slotTimeSelect, [], "Loading slot times...");
      try {
        // NOTE: your service signature is (cityId, locationId, date)
        const res = await getAllSlotTimeRequest(
          cityId,
          locationId,
          selectedDate
        );
        const times = Array.isArray(res?.data) ? res.data : [];
        // Expecting each item: { id, name } e.g. id="101", name="11:30 AM"
        setOptions(slotTimeSelect, times, "Select Slot Time");
      } catch (err) {
        console.error("[slot-times] fetch failed:", err);
        setOptions(slotTimeSelect, [], "Failed to load slot times");
      } finally {
        slotTimeSelect.disabled = false;
      }
    });

    // FORM submit → send registration payload
    form.addEventListener("submit", async (e: SubmitEvent) => {
      e.preventDefault();

      // Collect values
      const formData = new FormData(form);
      const payload = {
        fullName: (formData.get("fullName") as string) ?? "",
        dob: (formData.get("dob") as string) ?? "",
        email: (formData.get("email") as string) ?? "",
        phone: (formData.get("phone") as string) ?? "",
        institution: (formData.get("institution") as string) ?? "",
        city_id: Number(formData.get("city")) || 0,
        location_id: Number(formData.get("location")) || 0,

        // If your API expects appointment_id from the selected time:
        // - ensure <option value="APPOINTMENT_ID">TIME_LABEL</option> for slotTimeSelect
        // - then:
        appointment_id: Number(formData.get("slotTime")) || 0,

        // If your API instead needs raw date/time strings, add them too:
        // slot_date: (fd.get("slotDate") as string) ?? "",
        // slot_time: (fd.get("slotTimeLabel") as string) ?? "",
      };

      // minimal validation
      if (
        !payload.fullName ||
        !payload.email ||
        !payload.city_id ||
        !payload.location_id ||
        !payload.appointment_id
      ) {
        alert("Please fill all required fields.");
        return;
      }

      try {
        const res = await registerRequest(payload);
        console.log("[register] response:", res);
        alert("Registration successful!");
        // form.reset();
        // resetAfterCity();
      } catch (err) {
        console.error("[register] submit failed:", err);
        alert("Something went wrong. Please try again.");
      }
    });
  }
</script>

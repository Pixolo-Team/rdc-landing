---
// COMPONENTS //
import Select from "../components/Select.astro";

// API SERVICES //
import { getAllCitiesRequest } from "../services/api/dropdowns.api.service.ts";
import { getAllLocationsRequest } from "../services/api/dropdowns.api.service";

// Call API (server-side)

// const res = await fetch("http://3.7.74.98:3000/cities/");
// const loc = await fetch(
//   "http://3.7.74.98:3000/locations?city_id=1"
// );
// console.log(loc);

const res = await getAllCitiesRequest();
// console.log(res.data.items, "hh");

const data = [
  {
    id: "city-uuid-1",
    name: "Mumbai",
    locations: [
      {
        id: "loc-uuid-1-1",
        name: "Phoenix Marketcity, Kurla",
        appointments: [
          { id: "slot-uuid-1-1-1", name: "22 Aug, 2025 10:00am" },
          { id: "slot-uuid-1-1-2", name: "22 Aug, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-1-2",
        name: "R City Mall, Ghatkopar",
        appointments: [
          { id: "slot-uuid-1-2-1", name: "23 Aug, 2025 10:00am" },
          { id: "slot-uuid-1-2-2", name: "23 Aug, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-1-3",
        name: "Seawoods Grand Central, Navi Mumbai",
        appointments: [
          { id: "slot-uuid-1-3-1", name: "24 Aug, 2025 10:00am" },
          { id: "slot-uuid-1-3-2", name: "24 Aug, 2025 12:30pm" },
        ],
      },
    ],
  },
  {
    id: "city-uuid-2",
    name: "Pune",
    locations: [
      {
        id: "loc-uuid-2-1",
        name: "Phoenix Marketcity, Viman Nagar",
        appointments: [
          { id: "slot-uuid-2-1-1", name: "25 Aug, 2025 10:00am" },
          { id: "slot-uuid-2-1-2", name: "25 Aug, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-2-2",
        name: "Amanora Mall, Hadapsar",
        appointments: [
          { id: "slot-uuid-2-2-1", name: "26 Aug, 2025 10:00am" },
          { id: "slot-uuid-2-2-2", name: "26 Aug, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-2-3",
        name: "SGS Mall, Camp",
        appointments: [
          { id: "slot-uuid-2-3-1", name: "27 Aug, 2025 10:00am" },
          { id: "slot-uuid-2-3-2", name: "27 Aug, 2025 12:30pm" },
        ],
      },
    ],
  },
  {
    id: "city-uuid-3",
    name: "Bengaluru",
    locations: [
      {
        id: "loc-uuid-3-1",
        name: "Phoenix Marketcity, Whitefield",
        appointments: [
          { id: "slot-uuid-3-1-1", name: "28 Aug, 2025 10:00am" },
          { id: "slot-uuid-3-1-2", name: "28 Aug, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-3-2",
        name: "Forum Mall, Koramangala",
        appointments: [
          { id: "slot-uuid-3-2-1", name: "29 Aug, 2025 10:00am" },
          { id: "slot-uuid-3-2-2", name: "29 Aug, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-3-3",
        name: "Orion Mall, Rajajinagar",
        appointments: [
          { id: "slot-uuid-3-3-1", name: "30 Aug, 2025 10:00am" },
          { id: "slot-uuid-3-3-2", name: "30 Aug, 2025 12:30pm" },
        ],
      },
    ],
  },
  {
    id: "city-uuid-4",
    name: "Delhi",
    locations: [
      {
        id: "loc-uuid-4-1",
        name: "Select Citywalk, Saket",
        appointments: [
          { id: "slot-uuid-4-1-1", name: "31 Aug, 2025 10:00am" },
          { id: "slot-uuid-4-1-2", name: "31 Aug, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-4-2",
        name: "Pacific Mall, Tagore Garden",
        appointments: [
          { id: "slot-uuid-4-2-1", name: "01 Sep, 2025 10:00am" },
          { id: "slot-uuid-4-2-2", name: "01 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-4-3",
        name: "DLF Promenade, Vasant Kunj",
        appointments: [
          { id: "slot-uuid-4-3-1", name: "02 Sep, 2025 10:00am" },
          { id: "slot-uuid-4-3-2", name: "02 Sep, 2025 12:30pm" },
        ],
      },
    ],
  },
  {
    id: "city-uuid-5",
    name: "Hyderabad",
    locations: [
      {
        id: "loc-uuid-5-1",
        name: "GVK One, Banjara Hills",
        appointments: [
          { id: "slot-uuid-5-1-1", name: "03 Sep, 2025 10:00am" },
          { id: "slot-uuid-5-1-2", name: "03 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-5-2",
        name: "Inorbit Mall, Hitech City",
        appointments: [
          { id: "slot-uuid-5-2-1", name: "04 Sep, 2025 10:00am" },
          { id: "slot-uuid-5-2-2", name: "04 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-5-3",
        name: "Sarath City Capital Mall",
        appointments: [
          { id: "slot-uuid-5-3-1", name: "05 Sep, 2025 10:00am" },
          { id: "slot-uuid-5-3-2", name: "05 Sep, 2025 12:30pm" },
        ],
      },
    ],
  },
  {
    id: "city-uuid-6",
    name: "Chennai",
    locations: [
      {
        id: "loc-uuid-6-1",
        name: "Express Avenue, Royapettah",
        appointments: [
          { id: "slot-uuid-6-1-1", name: "06 Sep, 2025 10:00am" },
          { id: "slot-uuid-6-1-2", name: "06 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-6-2",
        name: "Phoenix Marketcity, Velachery",
        appointments: [
          { id: "slot-uuid-6-2-1", name: "07 Sep, 2025 10:00am" },
          { id: "slot-uuid-6-2-2", name: "07 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-6-3",
        name: "VR Chennai, Anna Nagar",
        appointments: [
          { id: "slot-uuid-6-3-1", name: "08 Sep, 2025 10:00am" },
          { id: "slot-uuid-6-3-2", name: "08 Sep, 2025 12:30pm" },
        ],
      },
    ],
  },
  {
    id: "city-uuid-7",
    name: "Ahmedabad",
    locations: [
      {
        id: "loc-uuid-7-1",
        name: "Ahmedabad One (Alpha One)",
        appointments: [
          { id: "slot-uuid-7-1-1", name: "09 Sep, 2025 10:00am" },
          { id: "slot-uuid-7-1-2", name: "09 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-7-2",
        name: "CG Road",
        appointments: [
          { id: "slot-uuid-7-2-1", name: "10 Sep, 2025 10:00am" },
          { id: "slot-uuid-7-2-2", name: "10 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-7-3",
        name: "Maninagar",
        appointments: [
          { id: "slot-uuid-7-3-1", name: "11 Sep, 2025 10:00am" },
          { id: "slot-uuid-7-3-2", name: "11 Sep, 2025 12:30pm" },
        ],
      },
    ],
  },
  {
    id: "city-uuid-8",
    name: "Kolkata",
    locations: [
      {
        id: "loc-uuid-8-1",
        name: "South City Mall",
        appointments: [
          { id: "slot-uuid-8-1-1", name: "12 Sep, 2025 10:00am" },
          { id: "slot-uuid-8-1-2", name: "12 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-8-2",
        name: "Quest Mall",
        appointments: [
          { id: "slot-uuid-8-2-1", name: "13 Sep, 2025 10:00am" },
          { id: "slot-uuid-8-2-2", name: "13 Sep, 2025 12:30pm" },
        ],
      },
      {
        id: "loc-uuid-8-3",
        name: "City Centre, Salt Lake",
        appointments: [
          { id: "slot-uuid-8-3-1", name: "14 Sep, 2025 10:00am" },
          { id: "slot-uuid-8-3-2", name: "14 Sep, 2025 12:30pm" },
        ],
      },
    ],
  },
];

const cityOptions = data.map((city, ci) => ({
  value: String(ci),
  label: city.name,
}));
---

<!-- Main/Form Section -->
<section
  class="min-h-full py-16 bg-muted flex flex-col gap-12 justify-center items-center bg-n-100"
>
  <h1 class="text-4xl font-bold">Form</h1>
  <!-- Form Wrapper -->
  <div class="w-1/3 mx-auto bg-n-50 p-8 rounded-lg shadow">
    <!-- Form -->
    <form id="registerForm" class="space-y-4 w-full">
      <!-- Full Name -->
      <div>
        <input
          id="fullName"
          type="text"
          placeholder="Full name"
          class="w-full border-0 border-b border-gray-300
           focus:outline-none focus:border-b-2 focus:border-sky-500
           active:outline-none active:border-b-2 active:border-sky-500
           p-3 placeholder-n-400 active:text-n-900 focus:text-n-900"
        />
      </div>

      <!-- Date of Birth -->
      <div>
        <label for="dob" class="block text-sm font-medium text-n-700">
          Date of Birth
        </label>
        <input
          id="dob"
          type="date"
          placeholder="YYYY-MM-DD"
          class="w-full border p-3 rounded"
        />
      </div>

      <!-- Mobile Number -->
      <div>
        <label for="phone" class="block text-sm font-medium text-n-700">
          Mobile Number
        </label>
        <input
          id="phone"
          type="tel"
          placeholder="Enter your mobile number"
          class="w-full border p-3 rounded"
        />
      </div>

      <!-- Email -->
      <div class="flex items-end flex-1 gap-3">
        <div class="flex-1">
          <label for="email" class="block text-sm font-medium text-n-700">
            Email
          </label>
          <input
            id="email"
            type="email"
            placeholder="Enter your email"
            class="w-full border p-3 rounded"
          />
        </div>
        <button id="request-otp" type="button" class="p-3 bg-n-800 text-n-50"
          >Verify Email</button
        >
      </div>

      <!-- Institution -->
      <div>
        <label for="institution" class="block text-sm font-medium text-n-700">
          Institution
        </label>
        <input
          id="institution"
          type="text"
          placeholder="Enter your institution"
          class="w-full border p-3 rounded"
        />
      </div>

      <div class="space-y-6">
        <!-- City -->
        <div>
          <label for="city-value" class="block text-sm font-medium text-n-700"
            >City</label
          >
          <Select id="city" label="City" options={cityOptions} />
        </div>

        <!-- Locations (one custom Select per city) -->
        {
          data.map((city, ci) => {
            const locationOptions = city.locations.map((loc, li) => ({
              value: loc.id,
              label: loc.name,
            }));
            const isFirst = ci === 0;
            return (
              <div
                id={`location-${ci}-wrap`}
                class={isFirst ? "block" : "hidden"}
              >
                <Select
                  id={`location-${ci}`}
                  label="Location/Center"
                  options={locationOptions}
                  disabled={true}
                />
              </div>
            );
          })
        }

        <!-- Slot Dates (one custom Select per city+location) -->
        {
          data.map((city, ci) =>
            city.locations.map((loc, li) => {
              const slotOptions = loc.appointments.map((a) => ({
                value: a.id,
                label: a.name,
              }));
              const show = ci === 0 && li === 0; // only first pair visible initially
              return (
                <div
                  id={`slot-${ci}-${li}-wrap`}
                  class={show ? "block" : "hidden"}
                >
                  <Select
                    id={`slot-${ci}-${li}`}
                    label="Slot Date"
                    options={slotOptions}
                    disabled={true}
                  />
                </div>
              );
            })
          )
        }
      </div>

      <!-- Submit -->
      <button type="submit" class="bg-n-800 text-n-50 px-6 py-3 rounded w-full">
        Submit
      </button>
    </form>
  </div>

  <script is:inline>
    (() => {
      // Initialize variables to track last selected city and location
      let lastCityIndex = -1;
      let cityIdx = -1;
      let lastLocationValue = -1;
      let locIdx = -1;

      const getValue = (id) =>
        document.getElementById(`${id}-value`)?.value ?? "";

      const hideAll = (selector) =>
        document
          .querySelectorAll(selector)
          .forEach((el) => el.classList.add("hidden"));

      const resetAll = (selector) => {
        console.log("inside");

        document.querySelectorAll(selector).forEach((el) => {
          el.querySelector("input").value = "";
          el.querySelector("[data-slot='current-label']").textContent = "";
        });
      };

      const showOnly = (selectorToShow, groupSelector) => {
        hideAll(groupSelector);
        resetAll(groupSelector);
        if (selectorToShow) {
          const el = document.querySelector(selectorToShow);
          if (el) el.classList.remove("hidden");
        }
      };

      const resetLocationSelect = (cityIdx) => {
        const locationSelect = document.getElementById(
          `location-${cityIdx}-button`
        );
        if (locationSelect) {
          locationSelect.disabled = false;
          locationSelect.querySelector(
            "[data-slot='current-label']"
          ).textContent = "Select Location/Center";
          console.log("Current Label Reset for City Index: ", cityIdx);
        }
      };

      const resetSlotSelect = (cityIdx, locIdx, shouldDisable = true) => {
        const slotSelect = document.getElementById(
          `slot-${cityIdx}-${locIdx}-button`
        );
        if (slotSelect) {
          slotSelect.disabled = shouldDisable;
          slotSelect.querySelector("[data-slot='current-label']").textContent =
            "Select Slot Date";
        }
      };

      const syncVisibility = () => {
        if (cityIdx !== lastCityIndex) {
          // Show only the matching location select
          showOnly(
            `#location-${cityIdx}-wrap`,
            "[id^='location-'][id$='-wrap']"
          );
          resetLocationSelect(cityIdx);
          resetSlotSelect(lastCityIndex, locIdx);
          console.log("City Index", cityIdx, locIdx);
          locIdx = -1; // Reset location index when city changes
          lastCityIndex = cityIdx;
        }

        // 2) Location within this city
        const locIdxStr = getValue(`location-${cityIdx}`);
        if (lastLocationValue !== locIdxStr) {
          if (locIdx < 0) {
            // Location not chosen yet → keep all slot dates hidden
            return;
          } else {
            //Show the slot date for (cityIdx, locIdx)
            showOnly(
              `#slot-${cityIdx}-${locIdx}-wrap`,
              "[id^='slot-'][id$='-wrap']" // <-- target ALL slot dates, not just current city
            );
            resetSlotSelect(cityIdx, locIdx, false);
          }
          lastLocationValue = locIdxStr;
        }
      };

      const attachListClick = (id) => {
        const list = document.getElementById(`${id}-list`);
        if (!list) return;
        list.addEventListener("click", (e) => {
          const target = e.target;
          const li = target.closest("li[data-index]");
          cityIdx = li.dataset.index;
          //  setTimeout(syncVisibility); // Delay to ensure visibility is updated after click
          syncVisibility(); // Call immediately to update visibility
        });
      };

      attachListClick("city");
      // Attach to all location lists (one per city)
      document
        .querySelectorAll("[id^='location-'][id$='-list']")
        .forEach((ul) => {
          ul.addEventListener("click", (e) => {
            const target = e.target;
            const li = target.closest("li[data-index]");
            locIdx = li.dataset.index;
            console.log("Setting Location Index: ", locIdx);
            // setTimeout(syncVisibility); // Delay to ensure visibility is updated after click
            syncVisibility(); // Call immediately to update visibility
          });
        });

      syncVisibility();
    })();
  </script>
</section>

---
// Props
interface FaqItem {
  title: string;
  description: string;
  open?: boolean;
}

const { items: faqItems = [] } = Astro.props as { items: FaqItem[] };
---

<!-- Faq Component -->
<div
  class="faqItem-list flex flex-col justify-start items-center w-full shadow-2xl xl:max-w-2/3"
  data-sal="fade"
  data-sal-duration="300"
  data-sal-easing="ease-out"
>
  {
    faqItems.map((faqItem, itemIndex) => {
      // Unique id
      const panelId = `faqItem-body-${itemIndex}`;

      return (
        <div
          class="faqItem-box bg-n-50 p-6 md:p-8 w-full flex flex-col lg:pl-16 cursor-pointer
         before:content-[''] before:absolute before:inset-y-0 before:left-0 before:w-1
         before:bg-red-500 before:opacity-0 before:transition-opacity before:duration-300
         relative data-[open=true]:before:opacity-100 border-b-2 border-n-200 last:border-b-0"
          data-open={faqItem.open ? "true" : "false"}
          role="button"
          aria-expanded={faqItem.open ? "true" : "false"}
          aria-controls={panelId}
          data-sal="slide-up"
          data-sal-duration="500"
          data-sal-easing="ease-out-back"
          data-sal-delay={String(itemIndex * 120)}
        >
          {/* Title row (no button) */}
          <div class="flex flex-row justify-between items-center w-full gap-4">
            <p class="text-2xl font-semibold leading-snug text-n-950">
              {faqItem.title}
            </p>
            <img
              src="/images/down-arrow.svg"
              class="faqItem-arrow w-6 h-6 transition-transform duration-300"
              alt=""
              draggable="false"
            />
          </div>

          {/* Body */}
          <div
            id={panelId}
            class={`faqItem-body pt-8 ${faqItem.open ? "" : "hidden"}`}
          >
            <p class="text-lg font-medium text-n-950 w-[72%]">
              {faqItem.description}
            </p>
          </div>
        </div>
      );
    })
  }
</div>

<!-- (is:inline) Tells Astro to output this script into the HTML -->
<script is:inline>
  (function () {
    // Find the List
    const list = document.querySelector(".faqItem-list");
    if (!list) return;

    // Get parts inside one card
    const getParts = (item) => ({
      body: item.querySelector(".faqItem-body"),
      arrow: item.querySelector(".faqItem-arrow"),
    });

    // Open/Close one card
    function setOpen(item, open) {
      const { body, arrow } = getParts(item);
      if (!body) return;
      body.classList.toggle("hidden", !open);
      item.setAttribute("aria-expanded", String(open));
      item.dataset.open = open ? "true" : "false";
      if (arrow) {
        arrow.classList.toggle("rotate-180", open);
        arrow.classList.toggle("text-red-500", open);
      }
    }

    // Check is card open
    function isOpen(item) {
      const { body } = getParts(item);
      return body && !body.classList.contains("hidden");
    }

    // Set starting state for all cards
    list.querySelectorAll(".faqItem-box").forEach((item) => {
      const { body } = getParts(item);
      if (!body) return;
      const start =
        item.dataset.open === "true" || !body.classList.contains("hidden");
      setOpen(item, start);
    });

    // Click anywhere on the card to toggle it
    list.addEventListener("click", (e) => {
      const item = e.target && e.target.closest(".faqItem-box");
      if (!item || !list.contains(item)) return;
      setOpen(item, !isOpen(item));
    });
  })();
</script>

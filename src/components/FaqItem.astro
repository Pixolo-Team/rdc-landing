---
// FaqList.astro (simplified: no accordion mode)
// Props:
// - items: Array of FAQ objects { id, title, description, open? }
interface FaqItem {
  id: string;
  title: string;
  description: string;
  open?: boolean;
}

const { items: faqItems = [] } = Astro.props as { items: FaqItem[] };
---

<!-- Faq Component -->
<div class="faq-list flex flex-col justify-start items-center w-full">
  {
    faqItems.map((faq) => {
      // Unique id
      const panelId = `faq-body-${faq.id}`;

      return (
        <div
          class="faq-item bg-n-50 p-8 w-full flex flex-col pl-16"
          data-open={faq.open ? "true" : undefined}
        >
          {/* Title Button */}
          <button
            class="faq-header flex flex-row justify-between items-center bg-n-50 w-full text-left focus:outline-none cursor-pointer"
            type="button"
            aria-expanded="false"
            aria-controls={panelId}
          >
            {/* Title: Question */}
            <p class="text-2xl font-semibold leading-snug text-n-950">
              {faq.title}
            </p>
            {/* Down Arrow icon */}
            <img
              src="/images/down-arrow.svg"
              class="faq-arrow w-6 h-6 transition-transform duration-300"
              alt="arrow"
              draggable="false"
            />
          </button>

          {/* Collapsible body: Hidden by default unless faq.open is true. */}
          <div id={panelId} class={`faq-body pt-8 ${faq.open ? "" : "hidden"}`}>
            {/* Description: answer */}
            <p class="text-lg font-medium text-n-950 w-[72%]">
              {faq.description}
            </p>
          </div>
        </div>
      );
    })
  }
</div>

<!-- (is:inline) Tells Astro to output this script into the HTML -->
<script is:inline>
  /** Find the FAQ list root. If not present, exit safely. */
  (function () {
    // Find the container and all item nodes
    const faqListElement = document.querySelector(".faq-list");
    if (!faqListElement) return;

    /** Collect all .faq-item nodes. We'll manage each item independently (multiple can be open). */
    const faqItemElements = Array.from(
      faqListElement.querySelectorAll(".faq-item")
    );

    // Access key parts of an item
    // Given an item element, return references to its key parts. (headerButton, bodyPanel, arrowIcon)
    function getItemParts(itemElement) {
      return {
        headerButton: itemElement.querySelector(".faq-header"),
        bodyPanel: itemElement.querySelector(".faq-body"),
        arrowIcon: itemElement.querySelector(".faq-arrow"),
      };
    }

    // Applies open/closed state to a single item
    function setItemState(itemElement, isOpen) {
      const { headerButton, bodyPanel, arrowIcon } = getItemParts(itemElement);
      if (!headerButton || !bodyPanel) return;

      // Show/hide the body (via .hidden)
      bodyPanel.classList.toggle("hidden", !isOpen);
      // Update aria-expanded on the header button

      headerButton.setAttribute("aria-expanded", String(isOpen));
      // Rotate the arrow icon (via .rotate-180)
      if (arrowIcon) arrowIcon.classList.toggle("rotate-180", isOpen);

      // Optional: left border highlight when open
      itemElement.classList.toggle("border-l-4", isOpen);
      itemElement.classList.toggle("border-red-500", isOpen);
    }

    // Determine if item is currently open
    function isItemOpen(itemElement) {
      const { bodyPanel } = getItemParts(itemElement);
      return bodyPanel && !bodyPanel.classList.contains("hidden");
    }

    // Initialize all items and attach click handlers.
    // Clicking the header toggles only that item.
    faqItemElements.forEach((itemElement) => {
      const { headerButton, bodyPanel } = getItemParts(itemElement);
      if (!headerButton || !bodyPanel) return;

      // We compute initial open state from either
      // a) data-open="true", or
      // b) bodyPanel is not hidden in the DOM.

      // Initial state from data-open or existing visibility
      const shouldStartOpen =
        itemElement.dataset.open === "true" ||
        !bodyPanel.classList.contains("hidden");
      setItemState(itemElement, shouldStartOpen);

      // Toggle only this item (multiple items can be open)
      headerButton.addEventListener("click", () =>
        setItemState(itemElement, !isItemOpen(itemElement))
      );

      // This guarantees clicking the <h3> or the arrow (or header whitespace) works.
      itemElement.addEventListener("click", (e) => {
        // Ignore clicks inside the body (so links/buttons in the answer work normally)
        if (bodyPanel.contains(e.target)) return;

        // If the click happened within the header area or on the item container itself, toggle.
        if (headerButton.contains(e.target) || e.target === itemElement) {
          setItemState(itemElement, !isItemOpen(itemElement));
        }
      });
    });
  })();
</script>
